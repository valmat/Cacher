<?php
################################################################################
/**
  *  [Cacher_Backend]
  *  config for class  extendeds from Cacher_Backend
  */


    /***************************************************************************
      *   Cacher_Backend_MemReFile
      */
    
    class CONFIG_Cacher_BK_MemReFile {

        /**
          * Префикс для формирования ключа блокировки
          */
        const LOCK_PREF   = '~lock';
        
        /**
          * Время жизни ключа блокировки. Если во время перестроения кеша процесс аварийно завершится,
          * то блокировка останется включенной и другие процессы будут продолжать выдавать протухший кеш LOCK_TIME секунд.
          * С другой стороны если срок блокировки истечет до того, как кеш будет перестроен, то возникнет состояние гонки и блокировочный механизм перестанет работать.
          * Т.е. LOCK_TIME нужно устанавливать таким, что бы кеш точно успел быть построен, и не слишком больши, что бы протухание кеша было заметно в выдаче клиенту
          */
        const LOCK_TIME   = 7;
        
        /**
          * MAX_LifeTIME - максимальное время жизни кеша. По умолчанию 29 дней. Если методу set передан $LifeTime=0, то будет установлено 'expire' => (time()+self::MAX_LTIME)
          */
        const MAX_LTIME   = 2505600;
        
        /**
          * EXPIRE PREFIX - префикс для хранения ключа со временем истечения кеша
          */
        const EXPR_PREF   = '~xpr';
        
        /**
          * CACHE PATH - Путь к дериктории хранения кеша. В конце обратный слеш '/'
          */
        const CACHE_PATH  = './.tmp';
        
        /**
          * TMP PATH - Путь к папке со временными файлами
          */
        const TMP_PATH    = '/tmp';
        
        /**
          * CACHE EXTENTION - Расширение для файлов кеша
          */
        const C_EXT       = '.cache';
        
        /**
          * Cache file path depth - Глубина вложенности файлов с кешем
          * max value: 19
          */
        const CF_DEPTH       = 1;
        
        
    }

    /***************************************************************************
      *   Cacher_Backend_MemReCache0
      */

    class CONFIG_Cacher_BK_MemReCache0 {

        /**
          * Префикс для формирования ключа блокировки
          */
        const LOCK_PREF = '~lock';
        
        /**
          * Время жизни ключа блокировки. Если во время перестроения кеша процесс аварийно завершится,
          * то блокировка останется включенной и другие процессы будут продолжать выдавать протухший кеш LOCK_TIME секунд.
          * С другой стороны если срок блокировки истечет до того, как кеш будет перестроен, то возникнет состояние гонки и блокировочный механизм перестанет работать.
          * Т.е. LOCK_TIME нужно устанавливать таким, что бы кеш точно успел быть построен, и не слишком больши, что бы протухание кеша было заметно в выдаче клиенту
          */
        const LOCK_TIME = 7;
        
        /**
          * MAX_LifeTIME - максимальное время жизни кеша. По умолчанию 29 дней. Если методу set передан $LifeTime=0, то будет установлено 'expire' => (time()+self::MAX_LTIME)
          */
        const MAX_LTIME = 2505600;
        
    }
    

    /***************************************************************************
      *   Cacher_Backend_MemReCache
      */


    class CONFIG_Cacher_BK_MemReCache {

        /**
          * Префикс для формирования ключа блокировки
          */
        const LOCK_PREF = '~lock';
        
        /**
          * Время жизни ключа блокировки. Если во время перестроения кеша процесс аварийно завершится,
          * то блокировка останется включенной и другие процессы будут продолжать выдавать протухший кеш LOCK_TIME секунд.
          * С другой стороны если срок блокировки истечет до того, как кеш будет перестроен, то возникнет состояние гонки и блокировочный механизм перестанет работать.
          * Т.е. LOCK_TIME нужно устанавливать таким, что бы кеш точно успел быть построен, и не слишком больши, что бы протухание кеша было заметно в выдаче клиенту
          */
        const LOCK_TIME = 7;
        
        /**
          * MAX_LifeTIME - максимальное время жизни кеша. По умолчанию 29 дней. Если методу set передан $LifeTime=0, то будет установлено 'expire' => (time()+self::MAX_LTIME)
          */
        const MAX_LTIME = 2505600;
        
        /**
          * EXPIRE PREFIX - префикс для хранения ключа со временем истечения кеша
          */
        const EXPR_PREF = '~xpr';
        
    }
    

?>