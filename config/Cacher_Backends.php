<?php
################################################################################
/**
  *  [Cacher_Backend]
  *  config for class  extendeds from Cacher_Backend
  */


    /***************************************************************************
      *   Cacher_Backend_MemReFile
      */
    
    
    /**
      * Префикс для формирования ключа блокировки
      */
    define('CACHER_BK_MEMREFILE_LOCK_PREF', '~lock');
    
    /**
      * Время жизни ключа блокировки. Если во время перестроения кеша процесс аварийно завершится,
      * то блокировка останется включенной и другие процессы будут продолжать выдавать протухший кеш LOCK_TIME секунд.
      * С другой стороны если срок блокировки истечет до того, как кеш будет перестроен, то возникнет состояние гонки и блокировочный механизм перестанет работать.
      * Т.е. LOCK_TIME нужно устанавливать таким, что бы кеш точно успел быть построен, и не слишком больши, что бы протухание кеша было заметно в выдаче клиенту
      */
    define('CACHER_BK_MEMREFILE_LOCK_TIME', 7);
    
    /**
      * MAX_LifeTIME - максимальное время жизни кеша. По умолчанию 29 дней. Если методу set передан $LifeTime=0, то будет установлено 'expire' => (time()+self::MAX_LTIME)
      */
    define('CACHER_BK_MEMREFILE_MAX_LTIME', 2505600);
    
    /**
      * EXPIRE PREFIX - префикс для хранения ключа со временем истечения кеша
      */
    define('CACHER_BK_MEMREFILE_EXPR_PREF', '~xpr');

    /**
      * CACHE PATH - Путь к дериктории хранения кеша. В конце обратный слеш '/'
      */
    define('CACHER_BK_MEMREFILE_C_PATH',   '/tmp/safecache/');

    /**
      * TMP PATH - Путь к папке со временными файлами
      */
    define('CACHER_BK_MEMREFILE_TMP_PATH', '/tmp');

    /**
      * CACHE EXTENTION - Расширение для файлов кеша
      */
    define('CACHER_BK_MEMREFILE_C_EXT',    '.cache');




    /***************************************************************************
      *   Cacher_Backend_MemReCache0
      */

    
    /**
      * Префикс для формирования ключа блокировки
      */
    define('CACHER_BK_MEMRECACHE0_LOCK_PREF', '~lock');
    
    /**
      * Время жизни ключа блокировки. Если во время перестроения кеша процесс аварийно завершится,
      * то блокировка останется включенной и другие процессы будут продолжать выдавать протухший кеш LOCK_TIME секунд.
      * С другой стороны если срок блокировки истечет до того, как кеш будет перестроен, то возникнет состояние гонки и блокировочный механизм перестанет работать.
      * Т.е. LOCK_TIME нужно устанавливать таким, что бы кеш точно успел быть построен, и не слишком больши, что бы протухание кеша было заметно в выдаче клиенту
      */
    define('CACHER_BK_MEMRECACHE0_LOCK_TIME', 7);
    
    /**
      * MAX_LifeTIME - максимальное время жизни кеша. По умолчанию 29 дней. Если методу set передан $LifeTime=0, то будет установлено 'expire' => (time()+self::MAX_LTIME)
      */
    define('CACHER_BK_MEMRECACHE0_MAX_LTIME', 2505600);




    /***************************************************************************
      *   Cacher_Backend_MemReCache
      */

    
    /**
      * Префикс для формирования ключа блокировки
      */
    define('CACHER_BK_MEMRECACHE_LOCK_PREF', '~lock');
    
    /**
      * Время жизни ключа блокировки. Если во время перестроения кеша процесс аварийно завершится,
      * то блокировка останется включенной и другие процессы будут продолжать выдавать протухший кеш LOCK_TIME секунд.
      * С другой стороны если срок блокировки истечет до того, как кеш будет перестроен, то возникнет состояние гонки и блокировочный механизм перестанет работать.
      * Т.е. LOCK_TIME нужно устанавливать таким, что бы кеш точно успел быть построен, и не слишком больши, что бы протухание кеша было заметно в выдаче клиенту
      */
    define('CACHER_BK_MEMRECACHE_LOCK_TIME', 7);
    
    /**
      * MAX_LifeTIME - максимальное время жизни кеша. По умолчанию 29 дней. Если методу set передан $LifeTime=0, то будет установлено 'expire' => (time()+self::MAX_LTIME)
      */
    define('CACHER_BK_MEMRECACHE_MAX_LTIME', 2505600);
    
    /**
      * EXPIRE PREFIX - префикс для хранения ключа со временем истечения кеша
      */
    define('CACHER_BK_MEMRECACHE_EXPR_PREF', '~xpr');

?>
