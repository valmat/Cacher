<?php

/*******************************************************************************
  *  [Cacher]
  *  config for class  Cacher
  */

    define('CACHER_PATH_TAGS',     './src/data/tags.php');
    define('CACHER_PATH_SLOTS',    './src/data/slots.php');
    define('CACHER_PATH_BACKENDS', './src/data/backends/');

    # NameSpase prefix for cache key 
    define('CACHER_NAME_SPACE', 'dflt' );

    
/*******************************************************************************
  *  [Cacher_types]
  *  config for CACHER_TYPE_*
  */
   
    /*
     *  онстанты с типами кешировани€. —оздано в такой упрощенной форме, дл€ экономии системных ресурсов
     * ÷ель: структуризаци€ типов используемых кешей.
     * “.е. общий замысел такой:  онкретный слот указывает не на непосредственно конкретный бэкенд, а на константу с префиксом CACHER_TYPE_
     * исход€ только из постановки задачи и области применени€. ¬ этом случае изменение стратегии кешировани€ - это не переписывание каждого слота,
     * а перестройка констант CACHER_TYPE_*
     */

    /**
      * Ѕыстрый но дорогой кеш (в пам€ти). Ќизка€ надежность.
      * —ледует примен€ть дл€ часто запроашиваемых данных с относительно дешевым способом получени€, позвол€ющих дорогое хранилище
      */
    define('CACHER_TYPE_FAST', 'MemReCache' );

    /**
      * ƒостаточно быстрое (в основном в пам€ти), и в тоже врем€ надежное хранилище.
      * Ќадежностиь достигаетс€ за счет каскадности. “.е.  еширование происходит на двух уровн€х в быстрое (пам€ть) и надежное (файлы) хранилища.
      * ѕоскольку перекешированием занимаетс€ только один процесс (за счет блокировок) этот способ не очень сильно нагружает сервер
      * —ледует примен€ть дл€ данных, получаемых т€желым путем (т€желые запросы и т.п.) и позвол€ющих использование дорогого хранилища
      */
    define('CACHER_TYPE_SAFE', 'MemReFile' );

    /**
      * ƒешевый (в основном на файлах) способ кешировани€, но менее производительный по сравнению с self::FAST
      * —ледует примен€ть дл€ данных, требующих надежное хранилище
      * или данных, дл€ который использование более быстрых способов в пределах текущей конфигурации сервера непозволительно дорого.
      * (¬ случае переконфигурировани€ сервера можно сделать self::CHEAP = self::SAFE)
      */
    define('CACHER_TYPE_CHEAP', 'MemReFile' );

?>
